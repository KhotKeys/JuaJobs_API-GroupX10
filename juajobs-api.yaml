###############################################################################
#                              API METADATA                                   #
# --------------------------------------------------------------------------- #
# Basic information about the API: title, description, version, and contact.  #
###############################################################################
openapi: 3.0.3
info:
  title: JuaJobs API
  description: |
    Gig economy platform connecting African skilled workers with clients.
    Key features:
      - Job postings
      - User profiles
      - Job applications
  version: 1.0.0
  contact:
    name: API Support
    email: support@juajobs.com
  license:
    name: Proprietary

###############################################################################
#                               SERVERS                                       #
# --------------------------------------------------------------------------- #
# Define where the API is hosted (production and testing environments).       #
###############################################################################
servers:
  - url: https://api.juajobs.com/v1
    description: Production server (live environment)
  - url: https://sandbox.juajobs.com/v1
    description: Testing environment (for developers)

###############################################################################
#                                 TAGS                                        #
# --------------------------------------------------------------------------- #
# Logical grouping of endpoints (for Swagger UI organization).                #
###############################################################################
tags:
  - name: Jobs
    description: Job posting operations (create, list, view jobs)
  - name: Users
    description: User account management (registration, profiles)
  - name: Applications
    description: Job application handling (submit, track applications)

###############################################################################
#                               PATHS                                         #
# --------------------------------------------------------------------------- #
# All API endpoints with their parameters, requests, and responses.           #
###############################################################################
paths:
  # ====================== JOBS ENDPOINTS ====================== #
  /jobs:
    get:
      tags: [Jobs]
      summary: List all job postings
      description: |
        Returns paginated job listings with optional filters.
        Example: `/jobs?category=IT&location=Nairobi`
      parameters:
        - $ref: "#/components/parameters/categoryFilter"   # Filter by job category
        - $ref: "#/components/parameters/locationFilter"  # Filter by location
        - $ref: "#/components/parameters/pageNumber"      # Pagination: page number
        - $ref: "#/components/parameters/pageSize"        # Pagination: items per page
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobListResponse"  # Paginated job list
        400:
          $ref: "#/components/responses/BadRequest"  # Invalid filters/parameters

    post:
      tags: [Jobs]
      summary: Create a job posting
      security:
        - BearerAuth: []  # Requires JWT authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JobPostingInput"  # Input schema for job creation
            example:  # Sample request payload
              title: "Mobile App Developer"
              description: "Need Flutter developer for e-commerce app"
              category: "Technology"
              location: "Lagos"
              budget: 1200.00
      responses:
        201:
          description: Job created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobPosting"  # Returns created job
        401:
          $ref: "#/components/responses/Unauthorized"  # Missing/invalid token

  # --- Single Job Endpoint --- #
  /jobs/{id}:
    get:
      tags: [Jobs]
      summary: Get job by ID
      parameters:
        - $ref: "#/components/parameters/jobId"  # Path parameter: job ID
      responses:
        200:
          description: Job details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobPosting"  # Full job data
        404:
          $ref: "#/components/responses/NotFound"  # Job not found

  # ====================== USERS ENDPOINTS ====================== #
  /users:
    post:
      tags: [Users]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterInput"  # Registration fields
            example:  # Sample registration payload
              name: "John Doe"
              email: "john@example.com"
              password: "SecurePass123!"
              user_type: "client"
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"  # Returns user data (without password)

  # ====================== APPLICATIONS ENDPOINTS ====================== #
  /applications:
    post:
      tags: [Applications]
      summary: Submit job application
      security:
        - BearerAuth: []  # Requires authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationInput"  # Application data
      responses:
        201:
          description: Application submitted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Application"  # Returns application record

###############################################################################
#                             COMPONENTS                                      #
# --------------------------------------------------------------------------- #
# Reusable schemas, parameters, and responses to avoid duplication.          #
###############################################################################
components:
  # ====================== SECURITY SCHEMES ====================== #
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Use JWT token for authentication.
        Example: `Authorization: Bearer {token}`

  # ====================== PARAMETERS ====================== #
  parameters:
    jobId:
      name: id
      in: path
      required: true
      description: Unique ID of the job
      schema:
        type: integer
        example: 42

    categoryFilter:
      name: category
      in: query
      description: Filter jobs by category
      schema:
        type: string
        enum: [Technology, Construction, Education, Healthcare]  # Allowed values
    
    locationFilter:
      name: location
      in: query
      description: Filter jobs by location
      schema:
        type: string
        example: "Nairobi"

    pageNumber:
      name: page
      in: query
      description: Page number for pagination
      schema:
        type: integer
        default: 1
        minimum: 1

    pageSize:
      name: pageSize
      in: query
      description: Number of items per page (max 100)
      schema:
        type: integer
        default: 20
        maximum: 100

  # ====================== SCHEMAS (Data Models) ====================== #
  schemas:
    # ----- Job-Related Schemas ----- #
    JobPosting:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 42
        title:
          type: string
          example: "Backend Developer"
        description:
          type: string
        category:
          type: string
          enum: [Technology, Construction, Education]  # Allowed categories
        location:
          type: string
        budget:
          type: number
          format: float
          example: 500.00
        created_at:
          type: string
          format: date-time
          readOnly: true
      required: [title, description, category, location]  # Mandatory fields

    JobListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/JobPosting"  # List of jobs
        pagination:
          type: object
          properties:
            current_page:
              type: integer
            total_pages:
              type: integer
            total_items:
              type: integer

    JobPostingInput:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [Technology, Construction, Education]
        location:
          type: string
        budget:
          type: number
          format: float
      required: [title, description, category, location]  # Required for job creation

    # ----- User-Related Schemas ----- #
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        email:
          type: string
          format: email
        user_type:
          type: string
          enum: [client, worker]  # User roles

    UserRegisterInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8  # Password requirement
        user_type:
          type: string
          enum: [client, worker]
      required: [name, email, password, user_type]  # All fields required for registration

    # ----- Application-Related Schemas ----- #
    Application:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        job_id:
          type: integer
        worker_id:
          type: integer
        status:
          type: string
          enum: [pending, accepted, rejected]  # Possible statuses
        created_at:
          type: string
          format: date-time

    ApplicationInput:
      type: object
      properties:
        job_id:
          type: integer
        cover_letter:
          type: string
      required: [job_id]  # Minimum required to apply

    # ----- Error Handling ----- #
    Error:
      type: object
      properties:
        error:
          type: string  # Error type (e.g., "Bad Request")
        message:
          type: string  # Human-readable explanation
        details:
          type: array   # Optional detailed errors
          items:
            type: string

  # ====================== REUSABLE RESPONSES ====================== #
  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Bad Request"
            message: "Invalid category parameter"

    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Unauthorized"
            message: "Valid JWT token required"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            error: "Not Found"
            message: "Job with ID 999 does not exist"

###############################################################################
#                             SECURITY                                        #
# --------------------------------------------------------------------------- #
# Global security requirement (JWT auth for all endpoints by default).        #
###############################################################################
security:
  - BearerAuth: []  # Applies to all endpoints unless overridden